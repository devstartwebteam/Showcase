@using Showcase.Helpers
@using Showcase.Models
@model Showcase.Models.Post

@{
    ViewBag.Title = "Create Post";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

<h2>@ViewBag.Title</h2>
<hr />
@using (Html.BeginForm("Create", "Posts", FormMethod.Post, new { enctype = "multipart/form-data", @class = "ds-admin-form" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.PostId)
    <div class="row">
        <div class="col-md-8">

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                @Html.LabelFor(model => model.PostName, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.PostName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PostName, "", new { @class = "text-danger" })
            </div>

            <div class="form-group s-tiny-group">
                @Html.LabelFor(model => model.PostContent, htmlAttributes: new { @class = "control-label" })
                @Html.TextAreaFor(model => model.PostContent, new {  rows = "10", cols = "150", @class = "ds-fields form-control", @id = "ShowcaseEditor"})
                @Html.ValidationMessageFor(model => model.PostContent, "", new { @class = "text-danger" })
            </div>

            <div class="form-group s-tiny-group">
                @Html.LabelFor(model => model.PostSnippet, htmlAttributes: new { @class = "control-label" })
                @Html.TextAreaFor(m => m.PostSnippet, new { rows = "10", cols = "150", @class = "ds-fields form-control", @id = "ShowcaseSnippet", @maxlength = "100" })
                @Html.ValidationMessageFor(model => model.PostSnippet, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-1"></div>
        <div class="col-md-3">
            <div class="form-group">
                @Html.LabelFor(model => model.Author, htmlAttributes: new { @class = "control-label" })
                <div class="checkbox">
                    @Html.DropDownListFor(model => model.Author, Model.GetAuthorList(), "Select Author", new { @class = "browser-default form-control custom-select" })
                    @Html.ValidationMessageFor(model => model.Author, "", new { @class = "text-danger" })
                </div>
                <input type="hidden" id="ds-author-id" name="AuthorId" value="" />
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PostUrl, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.PostUrl, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PostUrl, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.Label("Post Image", htmlAttributes: new { @class = "control-label" })
                @Html.TextBoxFor(model => model.PostImageUpload, null, new { @class = "form-control", type = "file" })
                @Html.ValidationMessageFor(model => model.PostImageUpload, "", new { @class = "text-danger" }) <br />
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Categories, "Assign Categories", htmlAttributes: new { @class = "control-label" })
                @Html.Partial("_CheckBoxList", ShowcaseHtmlHelpers.GetCheckboxList("SelectedCategoryIds", "ds-checkbox ds-category-select", Model.CategoryMultiSelectList))
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PostLocations, "Assign Locations", htmlAttributes: new { @class = "control-label" })
                @Html.Partial("_CheckBoxList", ShowcaseHtmlHelpers.GetCheckboxList("SelectedLocationIds", "ds-checkbox ds-location-select", Model.LocationMultiSelectList))
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Tags, "Assign Tags", htmlAttributes: new { @class = "control-label" })
                @Html.Partial("_CheckBoxList", ShowcaseHtmlHelpers.GetCheckboxList("SelectedTagIds", "ds-checkbox ds-tag-select", Model.TagMultiSelectList))
            </div>

            @*<div class="form-group">
            @Html.LabelFor(model => model.Active, htmlAttributes: new { @class = "control-label" })
            <div class="checkbox">
                @Html.EditorFor(model => model.Active)
                @Html.ValidationMessageFor(model => model.Active, "", new { @class = "text-danger" })
            </div>
        </div>*@
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <input type="submit" value="Create" class="btn ds-default-btn" />
            </div>
        </div>
        <div class="col-md-6 text-right">
            <div class="form-group">
                @Html.ActionLink("Back to List", "Index", "Posts", null, new { @class = "btn ds-default-btn" })
            </div>
        </div>
    </div>
}

@section scripts {
    <script type="text/javascript">
        $(function() {
            $('.ds-admin-form').on('submit',
                function() {
                    var selectedAuthor = $('#Author').val();
                    $('#ds-author-id').val(selectedAuthor);
                });

            var categoryIds = [];
            var locationIds = [];
            var tagIds = [];

            categoryIds = @Html.Raw(Json.Encode(Model.SelectedCategoryIds));
            locationIds = @Html.Raw(Json.Encode(Model.SelectedLocationIds));
            tagIds = @Html.Raw(Json.Encode(Model.SelectedTagIds));

            var $categoryBoxes = $('.ds-category-select .ds-check-input');
            var $locationBoxes = $('.ds-location-select .ds-check-input');
            var $tagBoxes = $('.ds-tag-select .ds-check-input');

            if (categoryIds != null) {
                for (var i = 0; i < $categoryBoxes.length; i++) {
                    for (var x = 0; x < categoryIds.length; x++) {
                        if ($categoryBoxes[i].value == categoryIds[x]) {
                            $categoryBoxes[i].checked = true;
                        }
                    }
                }
            }

            if (locationIds != null) {
                for (var j = 0; j < $locationBoxes.length; j++) {
                    for (var y = 0; y < locationIds.length; y++) {
                        if ($locationBoxes[j].value == locationIds[y]) {
                            $locationBoxes[j].checked = true;
                        }
                    }
                }
            }

            if (tagIds != null) {
                for (var k = 0; k < $tagBoxes.length; k++) {
                    for (var z = 0; z < tagIds.length; z++) {
                        if ($tagBoxes[k].value == tagIds[z]) {
                            $tagBoxes[k].checked = true;
                        }
                    }
                }
            }
        });

        $(window).on('load',
            function() {
                tinyMCE.get('ShowcaseEditor').setContent("@Html.Raw(HttpUtility.HtmlDecode(Model?.PostContent))");
                tinyMCE.get('ShowcaseSnippet').setContent("@Html.Raw(HttpUtility.HtmlDecode(Model?.PostSnippet))");
            });
    </script>
}